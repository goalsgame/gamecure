def helpers
@Library(value = 'goals-lib', changelog = false) _
def upload(uploadFolder, source, destinationFileName = "") {
	sh "gsutil cp ${source} gs://${STUDIO_STORE_BUCKET_NAME}/gamecure/${uploadFolder}/${destinationFileName}"
}
properties(
    [ parameters([string(name: "buildId", defaultValue: "unknown")]) ]
)

podTemplate(
		inheritFrom: 'linux',
		containers: [
			containerTemplate(name: "build-container", image: "mcr.microsoft.com/dotnet/sdk:6.0-alpine", command: "sleep", args: "infinite"),
			containerTemplate(name: "gcp-container", image: "google/cloud-sdk:362.0.0", command: "sleep", args: "99999")
		],
		envVars: [
			envVar(key: "DOTNET_CLI_HOME", value: "/tmp/DOTNET_CLI_HOME"),
			// https://github.com/dotnet/core/issues/7868
			envVar(key: "XDG_DATA_HOME", value: "/tmp/DOTNET_CLI_HOME")
		]) {
			node(POD_LABEL) {
				try{
					stage("checkout") {
						scmVars = checkout(scm)
						helpers = load "ci/helpers.groovy"
						helpers.setScmVars(scmVars)
						echo "scmVars: ${scmVars}"
						commit = helpers.getCommit()
						sh "echo \"${commit}\" > latest-commit.txt"
//						helpers.buildStarted("gamecure [Macos]")
					}

					stage("test") {
						container('build-container') {
							// Modify this line if we add more test projects
							sh "dotnet test tests/Gamecure.Core.Tests/Gamecure.Core.Tests.csproj"
						}
					}

					stage("build") {
						commitShort = helpers.getshortCommit()
						zipFile = "Gamecure.GUI.macos.${commitShort}.zip"
						container('build-container') {
							sh "dotnet run --project src/Gamecure.BuildTool/ -- config -t ${GAMECURE_CONFIG_DIR}config.json -gc ${commit} -o config.json"
							sh "dotnet run --project src/Gamecure.BuildTool/ -- build -c Release -o release/gamecure.GUI.macos -r osx --zip ${zipFile} --configfile config.json"
						}
						container('gcp-container') {
                            upload('build/' + helpers.getBranch() + "/${params.buildId}/linux", "release/linux/*.zip")
						}
					}
				}
				finally {
/*					if ("SUCCESS".equalsIgnoreCase(currentBuild.currentResult)) {
						helpers.buildSuccess("gamecure [Macos]")
					} else {
						helpers.buildFailed("gamecure [Macos]")
					}
*/				}
			}
		}
