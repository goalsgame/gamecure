def helpers
@Library(value = 'goals-lib', changelog = false) _
def upload(uploadFolder, source, destinationFileName = "") {
	gsUtilLocation = "\"~/google-cloud-sdk/bin/gsutil.cmd\""
	arguments = "\"cp\",\"${source}\",\"gs://${STUDIO_STORE_BUCKET_NAME}/gamecure/${uploadFolder}/${destinationFileName}\""
	pwsh "Start-Process -FilePath ${gsUtilLocation} -ArgumentList ${arguments} -NoNewWindow -Wait -PassThru"
}
properties(
    [ parameters([string(name: "buildId", defaultValue: "unknown")]) ]
)

podTemplate(
		inheritFrom: 'windows',
		containers: [
			containerTemplate(
			name: "build-container", image: "europe-west1-docker.pkg.dev/goals-build/pipeline/windows-build:1", args: "Start-Sleep 99999")
		]) {
			node(POD_LABEL) {
				try{
					stage("checkout") {
						scmVars = checkout(scm)
						helpers = load "ci/helpers.groovy"
						helpers.setScmVars(scmVars)
						echo "scmVars: ${scmVars}"
						commit = helpers.getCommit()
//						helpers.buildStarted("gamecure [Windows]")
					}

					stage("test") {
						container('build-container') {
							// Modify this line if we add more test projects
							powershell "dotnet test tests/Gamecure.Core.Tests/Gamecure.Core.Tests.csproj"
						}
					}

					stage("build") {
						commitShort = helpers.getshortCommit()
						zipFile = "Gamecure.GUI.win.${commitShort}.zip"
						container('build-container') {
							powershell "dotnet run --project src/Gamecure.BuildTool/ -- config -t ${GAMECURE_CONFIG_DIR}config.json -gc ${commit} -o config.json"
							powershell "dotnet run --project src/Gamecure.BuildTool/ -- build -c Release -o release/gamecure.GUI.win -r win --zip ${zipFile} --configfile config.json"
						}
						upload(helpers.getBranch(), "release/${zipFile}", zipFile)
					}

					stage("win installer") {
						container('build-container') {
							powershell "dotnet run --project src/Gamecure.BuildTool/ -- config -t ${GAMECURE_CONFIG_DIR}config.json -gc ${commit} -o config.json -f"
							powershell "dotnet run --project src/Gamecure.BuildTool/ -- build -c Release -o installer/ -r win -p installer --configfile config.json"
						}
                        upload('build/' + helpers.getBranch() + "/${params.buildId}/windows", "release/windows/*.zip")
                        upload('build/' + helpers.getBranch() + "/${params.buildId}/windows", "installer/*.msi")
					}
				}
				finally {
/*					if ("SUCCESS".equalsIgnoreCase(currentBuild.currentResult)) {
						helpers.buildSuccess("gamecure [Windows]")
					} else {
						helpers.buildFailed("gamecure [Windows]")
					}
*/				}
			}
		}
